#Currently does not function with Pi-Pucks

# We need this for 2D vectors
include "vec2.bzz"

# Lennard-Jones parameters
TARGET     = 50.0
EPSILON    = 150.0

# Neighbor data to LJ interaction vector
function lj_vector(rid, data) {
  log("robot ", rid, ": ",
    "distance  = ", data.distance, ", ",
    "azimuth   = ", data.azimuth, ", ",
    "elevation = ", data.elevation)
  return math.vec2.newp(lj_magnitude(data.distance, TARGET, EPSILON), data.azimuth)
}

# Lennard-Jones interaction magnitude
function lj_magnitude(dist, target, epsilon) {
  return -(epsilon / dist) * ((target / dist)^4 - (target / dist)^2)
}

# Accumulator of neighbor LJ interactions
function lj_sum(rid, data, accum) {
  return math.vec2.add(data, accum)
}

# Calculates and actuates the flocking interaction
function disperse() {
  # Calculate accumulator
  var accum = neighbors.map(lj_vector).reduce(lj_sum, math.vec2.new(0.0, 0.0))
  log("AccumulatorX ", accum.x, ", AccumulatorY ", accum.y)
  if(neighbors.count() > 0)
    math.vec2.scale(accum, 1.0 / neighbors.count())
  # Move according to vector
  goto(accum.x, accum.y)
}

# Executed at init time
function init() {
}

# Executed every time step
function step() {
  disperse()
}

function reset() {
}

# Execute at exit
function destroy() {
}